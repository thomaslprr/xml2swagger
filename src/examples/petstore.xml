<global>

	<objects>
	
		<object>
			<name>ApiResponse</name>
			<properties>
				<property>
					<name>code</name>
					<type>integer</type>
				</property>
				<property>
					<name>type</name>
					<type>string</type>
				</property>
				<property>
					<name>message</name>
					<type>string</type>
				</property>
			
			</properties>
		
		</object>

		<object>
			<name>Category</name>
			<properties>
				<property>
					<name>id</name>
					<type>long</type>
				</property>
				<property>
					<name>name</name>
					<type>string</type>
				</property>
			
			</properties>
		
		</object>
		
		<object>
			<name>Pet</name>
			<properties>
				<property>
					<name>id</name>
					<type>long</type>
				</property>
				<property>
					<name>category</name>
					<ref>Category</ref>
				</property>
				<property>
					<name>name</name>
					<type>string</type>
					<example>doggie</example>
					<required>true</required>
				</property>
				<property>
					<name>photoUrls</name>
					<type>array</type>
					<items><type>string</type></items>
					<required>true</required>
				</property>
				<property>
					<name>tags</name>
					<type>array</type>
					<items><ref>Tag</ref></items>
				</property>
				<property>
					<name>status</name>
					<type>string</type>
					<description>pet status in the store</description>
					<enums>
						<enum>available</enum><enum>pending</enum><enum>sold</enum>
					</enums>
				</property>
			</properties>
		
		</object>
		
		<object>
			<name>Tag</name>
			<properties>
				<property>
					<name>id</name>
					<type>long</type>
				</property>
				<property>
					<name>name</name>
					<type>string</type>
				</property>
			
			</properties>
		
		</object>
		
		<object>
			<name>Order</name>
			<properties>
				<property>
					<name>id</name>
					<type>long</type>
				</property>
				<property>
					<name>petId</name>
					<type>long</type>
				</property>
				<property>
					<name>quantity</name>
					<type>integer</type>
				</property>
				<property>
					<name>shipDate</name>
					<type>dateTime</type>
				</property>
				<property>
					<name>status</name>
					<type>string</type>
					<description>Order Status</description>
					<enums>
						<enum>placed</enum>
						<enum>approved</enum>
						<enum>delivered</enum>
					
					</enums>
				</property>
				<property>
					<name>complete</name>
					<type>boolean</type>
				</property>
			
			</properties>
		
		</object>
		
		<object>
			<name>User</name>
			<properties>
				<property>
					<name>id</name>
					<type>long</type>
				</property>
				
				<property>
					<name>username</name>
					<type>string</type>
				</property>
				
				<property>
					<name>firstName</name>
					<type>string</type>
				</property>
				
				<property>
					<name>lastName</name>
					<type>string</type>
				</property>
				
				<property>
					<name>email</name>
					<type>string</type>
				</property>
				
				<property>
					<name>password</name>
					<type>string</type>
				</property>
				
				<property>
					<name>phone</name>
					<type>string</type>
				</property>
			
				<property>
					<name>userStatus</name>
					<type>integer</type>
					<description>User Status</description>
				</property>
			
			</properties>
		
		</object>


	</objects>


	<rest>
	
		<info>
		
			<description>This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.</description>
			<version>1.0.5</version>
			<title>Swagger Petstore</title>
			<termsOfService>http://swagger.io/terms/</termsOfService>
			<contactEmail>apiteam@swagger.io</contactEmail>
			<licenceName>Apache 2.0</licenceName>
			<licenceUrl>http://www.apache.org/licenses/LICENSE-2.0.html</licenceUrl>
		</info>
		
		<host>petstore.swagger.io</host>
		<basePath>/v2</basePath>
		
		<tags>
			<tag>
				<name>pet</name>
				<description>Everything about your Pets</description>
				<externalDocs>
					<description>Find out more</description>
					<url>http://swagger.io</url>
				</externalDocs>
			</tag>
			
			<tag>
				<name>store</name>
				<description>Access to Petstore orders</description>
			</tag>
			
			<tag>
				<name>user</name>
				<description>Operations about user</description>
				<externalDocs>
					<description>Find out more about our store</description>
					<url>http://swagger.io</url>
				</externalDocs>
			</tag>
		
		</tags>
		
		<schemes>
			<scheme>https</scheme>
			<scheme>http</scheme>
		</schemes>
		
		<paths>
		
			<path>
				<name>/pet</name>
				<methods>
				<method>
					<type>post</type>
					<tags><tag>pet</tag></tags>
					<summary>Add a new pet to the store</summary>
					<operationId>addPet</operationId>
					<consumes>
						<consume>application/json</consume>
						<consume>application/xml</consume>
					</consumes>
					<produces>
						<produce>application/json</produce>
						<produce>application/xml</produce>
					</produces>
					<parameters>
						<parameter>
						<in>body</in>
						<name>body</name>
						<description>Pet object that needs to be added to the store</description>
						<required>true</required>
						<schema><ref>Pet</ref></schema>
						</parameter>
					</parameters>
					<responses>
						<response>
							<name>405</name>
							<description>Invalid input</description>
						</response>
					</responses>
					<securities>
						<security>
							<name>petstore_auth</name>
							<values>
								<value>write:pets</value>
								<value>read:pets</value>
							</values>
						
						</security>
					</securities>
				
				</method>
				
				<method>
				
					<type>put</type>
					<tags>
						<tag>pet</tag>
					</tags>
					<summary>Update an existing pet</summary>
					<operationId>updatePet</operationId>
					<consumes>
						<consume>application/json</consume>
						<consume>application/xml</consume>
					</consumes>
					
					<produces>
						<produce>application/json</produce>
						<produce>application/xml</produce>
					</produces>
					<parameters>
						<parameter>
							<in>body</in>
							<name>body</name>
							<description>Pet object that needs to be added to the store</description>
							<required>true</required>
							<schema><ref>Pet</ref></schema>
						</parameter>
					</parameters>
					<responses>
						<response>
							<name>400</name>
							<description>Invalid ID supplied</description>
						</response>
						
						<response>
							<name>404</name>
							<description>Pet not found</description>
						</response>
						
						<response>
							<name>405</name>
							<description>Validation exception</description>
						</response>
					
					</responses>
					<securities>
						<security>
							<name>petstore_auth</name>
							<values>
								<value>write:pets</value>
								<value>read:pets</value>
							</values>
						
						</security>
					</securities>
				</method>
				</methods>
			</path>
			
			<path>
				<name>/pet/{petId}/uploadImage</name>
				<methods>
				
					<method>
					<type>post</type>
					<tags><tag>pet</tag></tags>
					<summary>uploads an image</summary>
					<operationId>uploadFile</operationId>
					<consumes>
						<consume>multipart/form-data</consume>
					</consumes>
					<produces>
						<produce>application/json</produce>
					</produces>
					<parameters>
					
						<parameter>
							<name>petId</name>
							<in>path</in>
							<description>ID of pet to update</description>
							<required>true</required>
							<type>long</type>
						
						</parameter>
						
						<parameter>
							<name>additionalMetadata</name>
							<in>formData</in>
							<description>Additional data to pass to server</description>
							<required>false</required>
							<type>string</type>
						
						</parameter>
						
						<parameter>
							<name>file</name>
							<in>formData</in>
							<description>file to upload</description>
							<required>false</required>
							<type>file</type>
						
						</parameter>
					
					</parameters>
					
					<responses>
						<response>
							<name>200</name>
							<description>successful operation</description>
							<schema><ref>ApiResponse</ref></schema>
						</response>
					</responses>
					
					<securities>
						<security>
							<name>petstore_auth</name>
							<values>
								<value>write:pets</value>
								<value>read:pets</value>
							</values>
						
						</security>
					</securities>
					
					</method>
				
				
				
				</methods>
			
			
			</path>
		
			<path>
				<name>/pet/findByStatus</name>
				<methods>
					<method>
						<type>get</type>
						<tags><tag>pet</tag></tags>
						<summary>Finds Pets by status</summary>
						<description>Multiple status values can be provided with comma separated strings</description>
						<operationId>findPetsByStatus</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<parameters>
							<parameter>
								<name>status</name>
								<in>query</in>
								<description>Status values that need to be considered for filter</description>
								<required>true</required>
								<type>array</type>
								<items>
									<type>string</type>
									<enums>
										<enum>available</enum>
										<enum>pending</enum>
										<enum>sold</enum>	
									</enums>
									<default>available</default>
								</items>
								<collectionFormat>multi</collectionFormat>
							
							</parameter>
						</parameters>
						
						<responses>
	
							<response>
								<name>200</name>
								<description>successful operation</description>
								<schema>
									<type>array</type>
									<items>
										<ref>Pet</ref>
									</items>
								
								</schema>
							
							</response>
							
							<response>
								<name>400</name>
								<description>Invalid status value</description>
							</response>

												
						</responses>
						
						<securities>
						<security>
							<name>petstore_auth</name>
							<values>
								<value>write:pets</value>
								<value>read:pets</value>
							</values>
						
						</security>
					</securities>


					</method>
				</methods>
			
			</path>
			
			<path>
				<name>/pet/findByTags</name>
				<methods>
					<method>
						<type>get</type>
						<tags><tag>pet</tag></tags>
						<summary>Finds Pets by tags</summary>
						<description>Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.</description>
						<operationId>findPetsByTags</operationId>
						<deprecated>true</deprecated>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<parameters>

							<parameter>
								<name>tags</name>
								<in>query</in>
								<description>Tags to filter by</description>
								<required>true</required>
								<type>array</type>
								<items>
									<type>string</type>
								</items>
								<collectionFormat>multi</collectionFormat>
							
							</parameter>
						</parameters>
						
						<responses>

							<response>
								<name>200</name>
								<description>successful operation</description>
								<schema>
									<type>array</type>
									<items>
										<ref>Pet</ref>
									</items>
								
								</schema>
							
							</response>
							
							<response>
								<name>400</name>
								<description>Invalid tag value</description>
							
							</response>
						
						
						</responses>
						
						<securities>
						<security>
							<name>petstore_auth</name>
							<values>
								<value>write:pets</value>
								<value>read:pets</value>
							</values>
						
						</security>
					</securities>


					</method>
				</methods>
			
			</path>
			
			<path>
				<name>/pet/{petId}</name>
				<methods>
					<method>
						<type>get</type>
						<tags><tag>pet</tag></tags>
						<summary>Find pet by ID</summary>
						<description>Returns a single pet</description>
						<operationId>getPetById</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<parameters>
							<parameter>
								<name>petId</name>
								<in>path</in>
								<description>ID of pet to return</description>
								<required>true</required>
								<type>long</type>
							</parameter>
						</parameters>
						
						<responses>

							<response>
								<name>200</name>
								<description>successful operation</description>
								<schema>
									<ref>Pet</ref>
								</schema>
							
							</response>
							
							<response>
								<name>400</name>
								<description>Invalid ID supplied</description>
							
							</response>
							
							<response>
								<name>404</name>
								<description>Pet not found</description>
							
							</response>
						
						
						</responses>
						<securities>
						<security>
							<name>api_key</name>
							
						
						</security>
					</securities>


					</method>
					
					<method>
						<type>post</type>
						<tags><tag>pet</tag></tags>
						<summary>Updates a pet in the store with form data</summary>
						<operationId>updatePetWithForm</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<consumes>
							<consume>application/x-www-form-urlencoded</consume>
						</consumes>
						<parameters>
							<parameter>
								<name>petId</name>
								<in>path</in>
								<description>ID of pet that needs to be updated</description>
								<required>true</required>
								<type>long</type>
							</parameter>
							
							<parameter>
								<name>name</name>
								<in>formData</in>
								<description>Updated name of the pet</description>
								<required>false</required>
								<type>String</type>
							</parameter>
							
							<parameter>
								<name>status</name>
								<in>formData</in>
								<description>Updated status of the pet</description>
								<required>false</required>
								<type>String</type>
							</parameter>
						</parameters>
						
						<responses>

							<response>
								<name>405</name>
								<description>Invalid input</description>

							</response>
												
						</responses>
						
						<securities>
						<security>
							<name>petstore_auth</name>
							<values>
								<value>write:pets</value>
								<value>read:pets</value>
							</values>
						
						</security>
					</securities>


					</method>
				
				<method>
						<type>delete</type>
						<tags><tag>pet</tag></tags>
						<summary>Deletes a pet</summary>
						<operationId>deletePet</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<parameters>

							<parameter>
								<name>api_key</name>
								<in>header</in>
								<required>false</required>
								<type>String</type>
							</parameter>
							
							<parameter>
								<name>petId</name>
								<in>path</in>
								<description>Pet id to delete</description>
								<required>true</required>
								<type>long</type>
							</parameter>
							
							
						</parameters>
						
						<responses>
						
							<response>
								<name>400</name>
								<description>Invalid ID supplied</description>
							</response>

							<response>
								<name>404</name>
								<description>Pet not found</description>

							</response>
												
						</responses>
						
						<securities>
						<security>
							<name>petstore_auth</name>
							<values>
								<value>write:pets</value>
								<value>read:pets</value>
							</values>
						
						</security>
					</securities>


					</method>

				</methods>
			
			</path>

			<path>
				<name>/store/inventory</name>
				<methods>
					<method>
						<type>get</type>
						<tags><tag>store</tag></tags>
						<summary>Returns pet inventories by status</summary>
						<description>Returns a map of status codes to quantities</description>
						<operationId>getInventory</operationId>
						<produces>
							<produce>application/json</produce>
						</produces>
						<parameters>

							
						</parameters>
						
						<responses>

							<response>
								<name>200</name>
								<description>successful operation</description>
								<type>object</type>
								<schema>
									<type>object</type>
									<additionalProperties>
										<type>integer</type>
									</additionalProperties>
								
								</schema>
							
							</response>
							
							
						
						</responses>
						
						<securities>
						<security>
							<name>api_key</name>
						</security>
					</securities>


					</method>
				</methods>
			
			</path>

			<path>
				<name>/store/order</name>
				<methods>
					<method>
						<type>post</type>
						<tags><tag>store</tag></tags>
						<summary>Place an order for a pet</summary>
						<operationId>placeOrder</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<consumes>
							<consume>application/json</consume>
						</consumes>
						<parameters>
							<parameter>
							<in>body</in>
							<name>body</name>
							<description>order placed for purchasing the pet</description>
							<required>true</required>
							<schema>
								<ref>Order</ref>
							</schema>
							</parameter>
						</parameters>
						
						<responses>

							<response>
								<name>200</name>
								<description>successful operation</description>
								<schema>
									<ref>Order</ref>
								
								</schema>
							
							</response>
							
							<response>
								<name>400</name>
								<description>Invalid Order</description>
							
							</response>
						
						
						</responses>


					</method>
				</methods>
			
			</path>		

			<path>
				<name>/store/order/{orderId}</name>
				<methods>
					<method>
						<type>get</type>
						<tags><tag>store</tag></tags>
						<summary>Find purchase order by ID</summary>
						<description>For valid response try integer IDs with value >= 1 and &lt;= 10. Other values will generated exceptions</description>
						<operationId>getOrderById</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<parameters>
							<parameter>
								<in>path</in>
								<name>orderId</name>
								<description>ID of pet that needs to be fetched</description>
								<required>true</required>
								<type>long</type>
								<maximum>10</maximum>
								<minimum>1</minimum>
							</parameter>
						</parameters>
						
						<responses>

							<response>
								<name>200</name>
								<description>successful operation</description>
								<schema>
									<ref>Order</ref>
								
								</schema>
							
							</response>
							
							<response>
								<name>400</name>
								<description>Invalid ID supplied</description>
							
							</response>
							
							<response>
								<name>404</name>
								<description>Order not found</description>
							
							</response>
						
						
						</responses>


					</method>
					
					<method>
						<type>delete</type>
						<tags><tag>store</tag></tags>
						<summary>Delete purchase order by ID</summary>
						<description>For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors</description>
						<operationId>deleteOrder</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<parameters>

							<parameter>
								<in>path</in>
								<name>orderId</name>
								<description>ID of the order that needs to be deleted</description>
								<required>true</required>
								<type>long</type>
								<minimum>1</minimum>
							</parameter>
						</parameters>
						
						<responses>
							
							<response>
								<name>400</name>
								<description>Invalid ID supplied</description>
							
							</response>
							
							<response>
								<name>404</name>
								<description>Order not found</description>
							
							</response>
							
							
						
						
						</responses>


					</method>
				</methods>
			
			</path>				
		
			<path>
				<name>/user/createWithList</name>
				<methods>
					<method>
						<type>post</type>
						<tags><tag>user</tag></tags>
						<summary>Creates list of users with given input array</summary>
						<operationId>createUsersWithListInput</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<consumes>
							<consume>application/json</consume>
						</consumes>
						<parameters>
							<parameter>
							<in>body</in>
							<name>body</name>
							<description>List of user object</description>
							<required>true</required>
							<schema>
								<type>array</type>
								<items>
									<ref>User</ref>
								</items>
							</schema>
							</parameter>
						</parameters>
						
						<responses>

							<response>
								<name>default</name>
								<description>successful operation</description>

							
							</response>

						
						
						</responses>


					</method>
				</methods>
			
			</path>	
			
			<path>
				<name>/user/{username}</name>
				<methods>
					<method>
						<type>get</type>
						<tags><tag>user</tag></tags>
						<summary>Get user by user name</summary>
						<operationId>getUserByName</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<parameters>
							<parameter>
							<in>path</in>
							<name>username</name>
							<description>The name that needs to be fetched. Use user1 for testing. </description>
							<required>true</required>
							<type>String</type>
							</parameter>
						</parameters>
						
						<responses>

							<response>
								<name>200</name>
								<description>successful operation</description>
								<schema>
									<ref>User</ref>
								</schema>
							
							</response>
							
							<response>
								<name>400</name>
								<description>Invalid username supplied</description>
							</response>
							
							<response>
								<name>404</name>
								<description>User not found</description>
							</response>

						</responses>


					</method>
					
					<method>
						<type>put</type>
						<tags><tag>user</tag></tags>
						<summary>Updated user</summary>
						<description>This can only be done by the logged in user.</description>
						<operationId>updateUser</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<consumes>
							<consume>application/json</consume>
						</consumes>
						<parameters>

							<parameter>
							<in>path</in>
							<name>username</name>
							<description>name that need to be updated</description>
							<required>true</required>
							<type>String</type>
							</parameter>
							
							<parameter>
							<in>body</in>
							<name>body</name>
							<description>Updated user object</description>
							<required>true</required>
							<schema>
								<ref>User</ref>
							</schema>
							</parameter>
						</parameters>
						
						<responses>							
							<response>
								<name>400</name>
								<description>Invalid user supplied</description>
							</response>
							
							<response>
								<name>404</name>
								<description>User not found</description>
							</response>

						</responses>


					</method>
					
					<method>
						<type>delete</type>
						<tags><tag>user</tag></tags>
						<summary>Delete user</summary>
						<description>This can only be done by the logged in user.</description>
						<operationId>deleteUser</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<parameters>

							<parameter>
							<in>path</in>
							<name>username</name>
							<description>The name that needs to be deleted</description>
							<required>true</required>
							<type>String</type>
							</parameter>

						</parameters>
						
						<responses>							
							<response>
								<name>400</name>
								<description>Invalid username supplied</description>
							</response>
							
							<response>
								<name>404</name>
								<description>User not found</description>
							</response>

						</responses>


					</method>
				</methods>
			
			</path>			
		
			<path>
				<name>/user/login</name>
				<methods>
					<method>
						<type>get</type>
						<tags><tag>user</tag></tags>
						<summary>Logs user into the system</summary>
						<operationId>loginUser</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<parameters>

							<parameter>
							<in>query</in>
							<name>username</name>
							<description>The user name for login</description>
							<required>true</required>
							<type>String</type>
							</parameter>
							
							<parameter>
							<in>query</in>
							<name>password</name>
							<description>The password for login in clear text</description>
							<required>true</required>
							<type>String</type>
							</parameter>
						</parameters>
						
						<responses>

							<response>
								<name>200</name>
								<description>successful operation</description>
								<schema>
									<type>String</type>
								</schema>

							
							</response>
							
							<response>
								<name>400</name>
								<description>Invalid username/password supplied</description>
							</response>

						
						
						</responses>


					</method>
				</methods>
			
			</path>	
			
			<path>
				<name>/user/logout</name>
				<methods>
					<method>
						<type>get</type>
						<tags><tag>user</tag></tags>
						<summary>Logs out current logged in user session</summary>
						<operationId>logoutUser</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<parameters>
						</parameters>
						
						<responses>

							<response>
								<name>default</name>
								<description>successful operation</description>
							
							</response>

						</responses>


					</method>
				</methods>
			
			</path>	
			
			<path>
				<name>/user/createWithArray</name>
				<methods>
					<method>
						<type>post</type>
						<tags><tag>user</tag></tags>
						<summary>Creates list of users with given input array</summary>
						<operationId>createUsersWithArrayInput</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<consumes>
							<consume>application/json</consume>
						</consumes>
						<parameters>
						<parameter>
							<in>body</in>
							<name>body</name>
							<description>List of user object</description>
							<required>true</required>
							<schema>
								<type>array</type>
								<items><ref>User</ref></items>
							</schema>
							</parameter>

						</parameters>
						
						<responses>

							<response>
								<name>default</name>
								<description>successful operation</description>
							
							</response>

						</responses>


					</method>
				</methods>
			
			</path>	
			
			<path>
				<name>/user</name>
				<methods>
					<method>
						<type>post</type>
						<tags><tag>user</tag></tags>
						<summary>Create user</summary>
						<description>This can only be done by the logged in user.</description>
						<operationId>createUser</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<consumes>
							<consume>application/json</consume>
						</consumes>
						<parameters>
						<parameter>
							<in>body</in>
							<name>body</name>
							<description>Created user object</description>
							<required>true</required>
							<schema>
								<ref>User</ref>
							</schema>
							</parameter>

						</parameters>
						
						<responses>

							<response>
								<name>default</name>
								<description>successful operation</description>
							
							</response>

						</responses>


					</method>
				</methods>
			
			</path>	
		
		</paths>
		
		<securityDefinitions>
			<securityDefinition>

				<securityName>api_key</securityName>
				<headerName>api_key</headerName>
				<type>apiKey</type>
				<in>header</in>
			
			</securityDefinition>
			
			<securityDefinition>
				<securityName>petstore_auth</securityName>
				<type>oauth2</type>
				<authorizationUrl>https://petstore.swagger.io/oauth/authorize</authorizationUrl>
				<flow>implicit</flow>
				<scopes>
					<scope>
						<name>read:pets</name>
						<description>read your pets</description>
					</scope>
					<scope>
						<name>write:pets</name>
						<description>modify pets in your account</description>
					</scope>
				
				</scopes>
			
			</securityDefinition>
		
		</securityDefinitions>
		

	</rest>

</global>
