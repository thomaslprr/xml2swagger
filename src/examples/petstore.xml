<global>

	<objects>
	
		<object>
			<name>ApiResponse</name>
			<properties>
				<property>
					<name>code</name>
					<type>integer</type>
				</property>
				<property>
					<name>type</name>
					<type>string</type>
				</property>
				<property>
					<name>message</name>
					<type>string</type>
				</property>
			
			</properties>
		
		</object>

		<object>
			<name>Category</name>
			<properties>
				<property>
					<name>id</name>
					<type>long</type>
				</property>
				<property>
					<name>name</name>
					<type>string</type>
				</property>
				<property>
					<name>message</name>
					<type>string</type>
				</property>
			
			</properties>
		
		</object>
		
		<object>
			<name>Pet</name>
			<properties>
				<property>
					<name>id</name>
					<type>long</type>
				</property>
				<property>
					<name>category</name>
					<ref>Category</ref>
				</property>
				<property>
					<name>name</name>
					<type>string</type>
					<example>doggie</example>
					<required>true</required>
				</property>
				<property>
					<name>photoUrls</name>
					<type>array</type>
					<items><type>string</type></items>
					<required>true</required>
				</property>
				<property>
					<name>tags</name>
					<type>array</type>
					<items><ref>Tag</ref></items>
				</property>
				<property>
					<name>status</name>
					<type>string</type>
					<description>pet status in the store</description>
					<enums>
						<enum>available</enum><enum>pending</enum><enum>sold</enum>
					</enums>
				</property>
			</properties>
		
		</object>
		
		<object>
			<name>Tag</name>
			<properties>
				<property>
					<name>id</name>
					<type>long</type>
				</property>
				<property>
					<name>name</name>
					<type>string</type>
				</property>
			
			</properties>
		
		</object>
		
		<object>
			<name>Order</name>
			<properties>
				<property>
					<name>id</name>
					<type>long</type>
				</property>
				<property>
					<name>petId</name>
					<type>long</type>
				</property>
				<property>
					<name>quantity</name>
					<type>integer</type>
				</property>
				<property>
					<name>shipDate</name>
					<type>dateTime</type>
				</property>
				<property>
					<name>status</name>
					<type>string</type>
					<description>Order Status</description>
					<enums>
						<enum>placed</enum>
						<enum>approved</enum>
						<enum>delivered</enum>
					
					</enums>
				</property>
				<property>
					<name>complete</name>
					<type>boolean</type>
				</property>
			
			</properties>
		
		</object>
		
		<object>
			<name>User</name>
			<properties>
				<property>
					<name>id</name>
					<type>long</type>
				</property>
				
				<property>
					<name>username</name>
					<type>string</type>
				</property>
				
				<property>
					<name>firstName</name>
					<type>string</type>
				</property>
				
				<property>
					<name>lastName</name>
					<type>string</type>
				</property>
				
				<property>
					<name>email</name>
					<type>string</type>
				</property>
				
				<property>
					<name>password</name>
					<type>string</type>
				</property>
				
				<property>
					<name>phone</name>
					<type>string</type>
				</property>
			
				<property>
					<name>userStatus</name>
					<type>integer</type>
					<description>User Status</description>
				</property>
			
			</properties>
		
		</object>


	</objects>


	<rest>
	
		<info>
		
			<description>This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.</description>
			<version>1.0.5</version>
			<title>Swagger Petstore</title>
			<terms-of-service>http://swagger.io/terms/</terms-of-service>
			<contact-email>apiteam@swagger.io</contact-email>
			<licence-name>Apache 2.0</licence-name>
			<licence-url>http://www.apache.org/licenses/LICENSE-2.0.html</licence-url>
		</info>
		
		<host>petstore.swagger.io</host>
		<basePath>/v2</basePath>
		
		<tags>
			<tag>
				<name>pet</name>
				<description>Everything about your Pets</description>
				<external-docs>
					<description>Find out more</description>
					<url>http://swagger.io</url>
				</external-docs>
			</tag>
			
			<tag>
				<name>store</name>
				<description>Access to Petstore orders</description>
			</tag>
			
			<tag>
				<name>user</name>
				<description>Operations about user</description>
				<external-docs>
					<description>Find out more about our store</description>
					<url>http://swagger.io</url>
				</external-docs>
			</tag>
		
		</tags>
		
		<schemes>
			<scheme>https</scheme>
			<scheme>http</scheme>
		</schemes>
		
		<paths>
		
			<path>
				<name>/pet</name>
				<methods>
				<method>
					<type>post</type>
					<tags><tag>pet</tag></tags>
					<summary>Add a new pet to the store</summary>
					<operation-id>addPet</operation-id>
					<consumes>
						<consume>application/json</consume>
						<consume>application/xml</consume>
					</consumes>
					<parameters>
						<parameter>
						<in>body</in>
						<name>body</name>
						<description>Pet object that needs to be added to the store</description>
						<required>true</required>
						<schema><ref>Pet</ref></schema>
						</parameter>
					</parameters>
					<responses>
						<response>
							<name>405</name>
							<description>Invalid input</description>
						</response>
					</responses>
				
				
				</method>
				
				<method>
				
					<type>put</type>
					<tags>
						<tag>pet</tag>
					</tags>
					<summary>Update an existing pet</summary>
					<consumes>
						<consume>application/json</consume>
						<consume>application/xml</consume>
					</consumes>
					
					<produces>
						<produce>application/json</produce>
						<produce>application/xml</produce>
					</produces>
					<parameters>
						<parameter>
							<in>body</in>
							<name>body</name>
							<description>Pet object that needs to be added to the store</description>
							<required>true</required>
							<schema><ref>Pet</ref></schema>
						</parameter>
					</parameters>
					<responses>
						<response>
							<name>400</name>
							<description>Invalid ID supplied</description>
						</response>
						
						<response>
							<name>404</name>
							<description>Pet not found</description>
						</response>
						
						<response>
							<name>405</name>
							<description>Validation exception</description>
						</response>
					
					</responses>
				</method>
				</methods>
			</path>
			
			<path>
				<name>/pet/{petId}/uploadImage</name>
				<methods>
				
					<method>
					<type>post</type>
					<tags><tag>pet</tag></tags>
					<summary>uploads an image</summary>
					<operationId>uploadFile</operationId>
					<consumes>
						<consume>multipart/form-data</consume>
					</consumes>
					<produces>
						<produce>application/json</produce>
					</produces>
					<parameters>
					
						<parameter>
							<name>petId</name>
							<in>path</in>
							<description>ID of pet to update</description>
							<required>true</required>
							<type>long</type>
						
						</parameter>
						
						<parameter>
							<name>additionalMetadata</name>
							<in>formData</in>
							<description>Additional data to pass to server</description>
							<required>false</required>
							<type>string</type>
						
						</parameter>
						
						<parameter>
							<name>file</name>
							<in>formData</in>
							<description>file to upload</description>
							<required>false</required>
							<type>file</type>
						
						</parameter>
					
					</parameters>
					
					<responses>
						<response>
							<name>200</name>
							<description>successful operation</description>
							<schema><ref>ApiResponse</ref></schema>
						</response>
					</responses>
					
					</method>
				
				
				
				</methods>
			
			
			</path>
		
			<path>
				<name>/pet/findByStatus</name>
				<methods>
					<method>
						<type>get</type>
						<tags><tag>pet</tag></tags>
						<summary>Finds Pets by status</summary>
						<description>Multiple status values can be provided with comma separated strings</description>
						<operationId>findPetsByStatus</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<parameters>
							<parameter>
								<name>status</name>
								<in>query</in>
								<description>Status values that need to be considered for filter</description>
								<required>true</required>
								<type>array</type>
								<items>
									<type>string</type>
									<enums>
										<enum>available</enum>
										<enum>pending</enum>
										<enum>sold</enum>	
									</enums>
									<default>available</default>
								</items>
								<collectionFormat>multi</collectionFormat>
							
							</parameter>
						</parameters>
						
						<responses>
	
							<response>
								<name>200</name>
								<description>successful operation</description>
								<schema>
									<type>array</type>
									<items>
										<ref>Pet</ref>
									</items>
								
								</schema>
							
							</response>
						
						
						</responses>


					</method>
				</methods>
			
			</path>
			
			<path>
				<name>/pet/findByTags</name>
				<methods>
					<method>
						<type>get</type>
						<tags><tag>pet</tag></tags>
						<summary>Finds Pets by tag</summary>
						<description>Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.</description>
						<operationId>findPetsByTags</operationId>
						<produces>
							<produce>application/json</produce>
							<produce>application/xml</produce>
						</produces>
						<parameters>

							<parameter>
								<name>tags</name>
								<in>query</in>
								<description>Tags to filter by</description>
								<required>true</required>
								<type>array</type>
								<items>
									<type>string</type>
								</items>
								<collectionFormat>multi</collectionFormat>
							
							</parameter>
						</parameters>
						
						<responses>

							<response>
								<name>200</name>
								<description>successful operation</description>
								<schema>
									<type>array</type>
									<items>
										<ref>Pet</ref>
									</items>
								
								</schema>
							
							</response>
							
							<response>
								<name>400</name>
								<description>Invalid tag value</description>
							
							</response>
						
						
						</responses>


					</method>
				</methods>
			
			</path>

		
		</paths>
		

	</rest>

</global>
